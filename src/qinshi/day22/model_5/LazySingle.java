package qinshi.day22.model_5;

/**
 * @Author LiQin
 * @Version 1.o
 * @ClassName Single
 * @Date 2021/1/30 15:06
 */
/*
	1. 单例模式：（重点）
 *		1. 概念：设计一个类，这个类只能创建一个对象。（限制创建对象对象数量）
 *
 *		2. 怎么设计？
 *			控制创建对象的数量 => 创建对象通过new 调用构造方法 => 控制构造方法就能控制创建对象
 *			控制调用构造方法  => 用private修饰  => 需要给外部提供一个对象  =>
 *			先在类中创建一个对象 （联想到封装） => 提供一个公共的  getInstance给外部返回一个对象
 *
 *		3. 步骤：
 *			1. 私有化构造方法
 *			2. 在类中创建一个对象，并且用private、static、final修饰
 *					private为了避免在外部直接访问当前对象
 *					static是为了在静态方法中可以返回当前类中的对象
 *					final：可加可不加，加了可以保证不可修改，且提供获取效率
 *
 *			3. 提供一个public修饰的方法getInstance给外部返回一个对象
 *
 *		4. 单例模式获取方式：
 *			1. 饿汉模式：预加载模式	（优化方式：静态内部类）
 *				优点：在类加载的时候，就创建好对象放到静态区了，获取对象效率高。线程安全
 *				缺点：类加载效率低，并且static修饰的成员占用资源。
 *
 *			2. 懒汉模式：懒加载模式	(优化方式：双重校验锁)
 *				优点：节省资源，在需要的时候创建对象。
 *				缺点：线程不安全。获取对象的时候，效率低
 *				最简单的线程安全的方式：同步方法，效率低
 *				更好的的线程安全的方式：双重校验锁
 *
 *			3. 枚举：
 *				public enum Singleton{
					INSTANCE;
				}
 *
 *		5. 作用：
 *				1. 全局配置文件
 *				2. 全局日志文件
 *				3. 节省资源，例如，回收站、资源管理器、游戏单开窗口
 *
 *		6. 使用选择：
 *				一般用饿汉模式，如果有序列化（自己百度扩展）要求，用枚举。
 *
 *		7. 不需要频繁创建对象的时候；不允许多个对象 用单例
 */

 //懒汉式 被动创建
public class LazySingle {
    //将构造方法私有化  就不能用new创建对象
    private LazySingle(){}

    //定义一个私有化的属性，用于在调用方法时给与值
    private static LazySingle ls=null;

    //提供给外部类使用的静态方法(方便使用类名.方法名调用)   用于创建对象
    public static LazySingle getInstance(){
        //判断是否为第一次创建对象，只有第一次才创建对象
        if(ls==null){
            //创建对象
            ls=new LazySingle();
        }
        return ls;
    }
}
